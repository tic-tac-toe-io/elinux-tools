#!/bin/bash

function read_config {
	cat $1 | grep "^$2" | awk -F'=' '{print $2}'
}

function extract_kernel {
	local CURRENT=$(pwd)
	cd $(dirname $0)
	cd ..
	local REPO_NAME=$(basename $(pwd))
	local CACHE_DIR="/var/lib/${REPO_NAME}"
	local URL=$1
	[ "" == "${URL}" ] && URL="https://archives.t2t.io/embedded-linux/os/beaglebone/mirrors/elinux.org/bb-green/bone-ubuntu-14.04.3-console-armhf-2016-02-11-2gb.img.xz"
	cd ${CURRENT}

	mkdir -p ${CACHE_DIR}
	echo "using ${URL}"
	echo "local cache: ${CACHE_DIR}"

	local FILE=$(basename ${URL})
	local DOWNLOAD_FILE="${CACHE_DIR}/${FILE}"
	local NAME=${FILE}
	NAME=${NAME%.*}
	local DEVICE_IMAGE_FILE="${CACHE_DIR}/${NAME}"
	NAME=${NAME%.*}
	local ARCHIVE_DIR="/tmp/${NAME}-$(date '+%Y%m%d%H%M%S')"
	local ARCHIVE_IMAGE="/tmp/${NAME}.sqfs.xz"
	local KERNEL_DIR="/tmp/kernel"
	local KERNEL_PATCH_ARCHIVE="/tmp/${NAME}-kernel-"

	echo "archive-dir: ${ARCHIVE_DIR}"

	rm -rf ${ARCHIVE_DIR}

	if [ ! -f "${DOWNLOAD_FILE}" ]; then
		echo "wget -O ${DOWNLOAD_FILE} ${URL}"
		wget -O ${DOWNLOAD_FILE} ${URL}
		[ "0" != "$?" ] && echo "failed to download ${URL}" && exit 1
	fi

	if [ ! -f "${DEVICE_IMAGE_FILE}" ]; then
		unxz -k ${DOWNLOAD_FILE}
		[ "0" != "$?" ] && echo "failed to uncompress ${DOWNLOAD_FILE}" && exit 2
	fi

	[ ! -f "${DEVICE_IMAGE_FILE}" ] && echo "still missing ${DEVICE_IMAGE_FILE}" && exit 3

	echo "start kernel extraction ..." && \
		emb di2ad ${DEVICE_IMAGE_FILE} ${ARCHIVE_DIR} && \
		emb convert_ad ${ARCHIVE_DIR} bb1to2 ${KERNEL_DIR} && \
		cd ${KERNEL_DIR} && \
		tar cvzf /tmp/${NAME}-kernel-$(read_config ${KERNEL_DIR}/kernel-version.txt version)$(read_config ${KERNEL_DIR}/kernel-version.txt localversion).tar.gz .
}

extract_kernel $@
