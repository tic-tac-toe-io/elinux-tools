#!/bin/bash
#

# Here are variables initiated by load_and_run script:
#
#  - PART_NAME
#  - PART_DIR
#
# Here are variables initiated by apply_parts command,
# stored in ${WORK_DIR}/env.bash
# 
#  - AD_BUILD_WORK_TOPDIR           , e.g. /tmp/elinux-tools/apply_parts_20170409164024
#  - AD_BUILD_WORK_DEBIAN_PKG_LIST  , e.g. /tmp/elinux-tools/apply_parts_20170409164024/package-debian.txt
#  - AD_BUILD_WORK_PYTHON2_PKG_LIST , e.g. /tmp/elinux-tools/apply_parts_20170409164024/package-python2.txt
#  - AD_BUILD_WORK_PYTHON3_PKG_LIST ' e.g. /tmp/elinux-tools/apply_parts_20170409164024/package-python3.txt
#  - CLI_DIR
#  - ELINUX_TOOLS_DIR
#
#  (Following variables are retrieved from ${ARCHIVE_DIR}/rootfs.yaml)
#  - BOARD_DIST_CODENAME   bone, raspbian, ...
#  - DIST_CODENAME         trusty, jessie, ...
#  - DIST_NAME             ubuntu, debian, ...
#  - KERNEL_ARCHITECTURE   armv7l
#  - KERNEL                linux
#  - KERNEL_VERSION        4.1.17-ti-rt-r47
#
#  (Following variables are retrieved from the config.json passed to apply_parts subcommand, all are optional)
#  - BOARD                 bbgw, bbg, piz, pizw, ...
#  - BOARD_ENV             production, testing, development, ...
#  - BOARD_PROFILE         abc, def, spider, ...
#
# 


#
# The chroot_entry (guest script) running inside qemu with chroot,
# is invoked after following services are performed:
#
#	- elinux-common/run_all_services
#	  # useradd
#	    find ${AD_BUILD_WORK_TOPDIR}/elinux-common/services/useradd/*
#		apply user-add function on each found file
#
# Please note, following variables derived from parent process `emb_apply_parts`
# are reloaded from the generated `env.bash`. These variables are reloaded as 
# relative path in chroot:
# 
#  - AD_BUILD_WORK_TOPDIR
#  - AD_BUILD_WORK_DEBIAN_PKG_LIST
#  - AD_BUILD_WORK_PYTHON2_PKG_LIST
#  - AD_BUILD_WORK_PYTHON3_PKG_LIST
#
#  - CLI_DIR
#  - BASH_UTIL_DIR
#  - ELINUX_TOOLS_DIR
#

function update_timezone_database {
	local URL="http://archive.ubuntu.com/ubuntu/pool/main/t/tzdata/tzdata_2017b-1_all.deb"
	local LOCAL_CACHE_FILE="/tmp/tzdata.deb"

	if [ ! -f "${LOCAL_CACHE_FILE}" ]; then
		run_my_cmd "wget -q -O ${LOCAL_CACHE_FILE} ${URL}"
		return 1
	fi

	run_my_cmd "dpkg -i ${LOCAL_CACHE_FILE}"
}

function generate_os_dump {
	# Refer to https://github.com/yagamy4680/bash-utils/blob/master/system#L79-L88
	#
	local SYSTEM_DUMP="/opt/system"
	local OS_KERNEL=${KERNEL}
	local OS_DIST_NAME=${DIST_NAME}
	local OS_DIST_CODENAME=${DIST_CODENAME}
	local OS_ARCH=${KERNEL_ARCHITECTURE}
	local OS_NAME="${OS_KERNEL}-${OS_DIST_NAME}-${OS_DIST_CODENAME}"

	rm -f ${SYSTEM_DUMP}

	# For backward compatibility.
	#
	for v in OS_KERNEL OS_DIST_NAME OS_DIST_CODENAME OS_ARCH OS_NAME; do
		INFO "${SYSTEM_DUMP}: ${v}\t${!v}"
		echo -e "${v}\t${!v}" >> ${SYSTEM_DUMP}
	done
	echo "" >> ${SYSTEM_DUMP}

	# Standard variables.
	#
	for v in BOARD_DIST_CODENAME DIST_CODENAME DIST_NAME KERNEL_ARCHITECTURE KERNEL KERNEL_VERSION; do
		INFO "${SYSTEM_DUMP}: YAPPS_${v}\t${!v}"
		echo -e "YAPPS_${v}\t${!v}" >> ${SYSTEM_DUMP}
	done
}

function chroot_entry {
	case "${DIST_NAME}" in
		debian|ubuntu)
			run_my_cmd "apt-get remove apache2 -y && apt-get purge apache2 -y"
			run_my_cmd "apt-get remove udhcpd -y && apt-get purge udhcpd -y"
			run_my_cmd "update-rc.d pppd-dns disable"
			;;
		*)
			ERR "please try to disable ntp!!"
			ERR "please try to stop the running ntp daemon"
			return 1
			;;
	esac

	generate_os_dump || return 1
	update_timezone_database || return 1
}
