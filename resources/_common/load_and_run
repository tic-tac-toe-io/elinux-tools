#!/bin/bash
#

function load_helper_script {
	local SCRIPT=$1
	local COLOR='\033[0;32m'
	local NC='\033[0m'
	[ "true" == "${IGNORE_DEBUG_LOAD_HELPER}" ] || echo -e "loading ${COLOR}${SCRIPT}${NC}"
	source $1
}


function fn_exist {
	declare -f -F $1 > /dev/null
	return $?
}


function run_my_cmd {
	[ "true" == "${COMMAND_VERBOSE_TAB}" ] && local COMMAND_PREFIX="\t"
	[ "host" == "${HOST_OR_GUEST}" ] && INFO $(GREEN ${COMMAND_PREFIX}$@) || INFO $(YELLOW ${COMMAND_PREFIX}$@)
	[ "true" == "${DRY_RUN}" ] && return 0
	if [ "true" == "${NO_TAB}" ]; then
		${BASH} -c "$@" 2>&1
	else
		${BASH} -c "$@" 2>&1 | awk '{printf "\t%s\n", $0}'
	fi
}


function missing_implementation {
	ERR "${FUNCNAME[1]}:${BASH_LINENO[1]} => missing implementation. $@"
	return 1
}


function check_prerequisites {
	source ${ENV_BASH}
	export PART_DIR="${AD_BUILD_WORK_TOPDIR}/parts/${PART_NAME}"
	export PART_HOOK_SCRIPT="${PART_DIR}/hooks/${HOST_OR_GUEST}"

	[ ! -d "${BASH_UTIL_DIR}" ] && echo "missing bash util directory" && exit 10
	[ ! -d "${PART_DIR}" ] && echo "missing part directory ${PART_DIR}" && find ${AD_BUILD_WORK_TOPDIR} && exit 11

	# Nothing to do when the hook script is missing
	#
	[ ! -f "${PART_HOOK_SCRIPT}" ] && echo "exit immediately because of missing ${PART_HOOK_SCRIPT}" && exit 0

	# Nothing to do when the hook entry function (LOADER_ACTION)
	# is also missing. 
	#
	local PATTERN=$(cat ${PART_HOOK_SCRIPT} | grep "^function ${LOADER_ACTION}")
	[ "" == "${PATTERN}" ] && echo "exit immediately because of missing ${LOADER_ACTION} function in ${PART_HOOK_SCRIPT}" && exit 0
}


function check_environment_variables {
	for name in "$@"; do
		local value="${!name}"
		[ "" == "${value}" ] && ERR "missing $name variable" && return 1
		INFO "checking $name ... $value"
	done
	return 0
}


function load_all_files {
	load_helper_script "${BASH_UTIL_DIR}/verbose"
	load_helper_script "${BASH_UTIL_DIR}/funcs"
	load_helper_script "${BASH_UTIL_DIR}/lambda"
	if [ "" != "${ELINUX_COMMON_GUEST_LOADER}" ]; then
		init_verbose "${ELINUX_COMMON_GUEST_LOADER}[${LOADER_ACTION}::${PART_NAME}]"
	else
		init_verbose "${PART_NAME}[${LOADER_ACTION}]"
	fi
	load_helper_script ${PART_HOOK_SCRIPT}
}


function loader_main {
	export ENV_BASH=$1
	export PART_NAME=$2
	export HOST_OR_GUEST=$3
	export LOADER_ACTION=$4
	shift; shift; shift; shift

	[ "" == "${ENV_BASH}" ] && echo "please specify ENV_BASH as 1st parameter for $BASH_SOURCE" && exit 1
	[ ! -f "${ENV_BASH}" ] && echo "missing ${ENV_BASH} as ENV_BASH" && exit 2
	[ "" == "${PART_NAME}" ] && echo "please specify the name of PART as 2nd parameter for $BASH_SOURCE" && exit 3
	[ "" == "${HOST_OR_GUEST}" ] && echo "please specify HOST_OR_GUEST as 3rd parameter for $BASH_SOURCE" && exit 4
	[ "host" != "${HOST_OR_GUEST}" ] && [ "guest" != "${HOST_OR_GUEST}" ] && echo "3rd parameter for $BASH_SOURCE only allows host or guest, but ${HOST_OR_GUEST}" && exit 5
	[ "" == "${LOADER_ACTION}" ] && echo "please specify LOADER_ACTION as 4th parameter for $BASH_SOURCE" && exit 6

	check_prerequisites
	load_all_files

	if [ "guest" == "${HOST_OR_GUEST}" ]; then
		local ENV_PREFIX=$(echo "${PART_NAME}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
		local VARS=($(env | sort | grep "^${ENV_PREFIX}" | awk -F'=' '{print $1}'))
		INFO "environment variables for $(YELLOW ${PART_NAME}): (with prefix ${ENV_PREFIX})"
		for v in "${VARS[@]}"; do
			echo -e "\t${v} = $(GREEN ${!v})"
		done
		# INFO "loader_main::${ENV_BASH}:"
		# cat ${ENV_BASH} | awk '{printf "\t%s\n", $0}'
	fi

	fn_exist ${LOADER_ACTION} || return 0
	${LOADER_ACTION} $@
}

loader_main $@
