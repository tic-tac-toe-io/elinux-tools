#!/bin/bash
#
##DOC:	dump device image (*.bin) to archive directory

function mycli_command_prerequisites {
cat <<__EOF__
kpartx
losetup
dmsetup
blkid
lsc
jq
pv
__EOF__
}


function mycli_command_help {
cat <<__EOF__
${CLI_NAME} ${CLI_ACTION} [DEVICE IMAGE FILE] [ARCHIVE DIRECTORY]
${CLI_NAME} ${CLI_ACTION} [DEVICE IMAGE URL] [ARCHIVE DIRECTORY]

For example:
	${CLI_NAME} ${CLI_ACTION} $(GREEN "/tmp/bone-ubuntu-14.04.3-console-armhf-2016-02-11-2gb.img" "/tmp/bb-14.04.3")
	${CLI_NAME} ${CLI_ACTION} $(GREEN "/tmp/2017-03-02-raspbian-jessie-lite.img" "/tmp/rpb-jessie-lite")

There are some extra flags:
	- $(BLUE DUMP_AM335X_UBOOT_FROM_MBR), dump the uboot and MLO images from MBR, $(YELLOW false) by default.
__EOF__
}


function cleanup_mounting_points {
	local DEVICE_IMAGE_PATH=$1
	local DEVICE_IMAGE_FILE=$(basename "${DEVICE_IMAGE_PATH}")
	local LOOPBACK_DEVICE=$(losetup -a | grep "${DEVICE_IMAGE_FILE}" | awk -F':' '{print $1}')

	[ "" == "${LOOPBACK_DEVICE}" ] && INFO "${DEVICE_IMAGE_FILE} is not mounted, no necessary to umount" && return 0
	INFO "detect $(YELLOW ${LOOPBACK_DEVICE}) loopback device is mounted for ${DEVICE_IMAGE_PATH}"
	
	local LOOPBACK_DEVICE_NAME=$(basename ${LOOPBACK_DEVICE})
	local MOUNT_POINTS=($(mount | grep "^/dev/mapper/${LOOPBACK_DEVICE_NAME}p" | awk '{print $1}'))

	for mp in "${MOUNT_POINTS[@]}"; do
		INFO "umounting $(YELLOW ${mp}) for $(mount | grep ${mp} | awk '{print $3}')"
		RUN_CMD umount ${mp}
	done

	INFO "using kpartx to umount ${DEVICE_IMAGE_PATH}"
	RUN_CMD kpartx -d -s -v ${DEVICE_IMAGE_PATH}
	RUN_CMD sync
	RUN_CMD sleep 1
	dmsetup info | grep "^Name" | grep ${LOOPBACK_DEVICE_NAME} | awk '{print $2}' | xargs -I{} sh -c "echo {}; dmsetup remove {}"
	INFO "using losetup to delete loopback device ${LOOPBACK_DEVICE}"
	[ "" != "$(losetup -a | grep ${LOOPBACK_DEVICE})" ] && RUN_CMD losetup -d ${LOOPBACK_DEVICE}

	[ "" != "$(losetup -a | grep ${DEVICE_IMAGE_FILE})" ] && ERR "failed to umount ${DEVICE_IMAGE_PATH}, please reboot linux to cleanup system first, or use $(YELLOW dmsetup info) to get more information, and remove the logical volume by $(YELLOW dmsetup remove)" && exit 1
}


function output_partition_info {
cat <<__EOF__ >> $1
	'${PARTITION_NUMBER}':
		uuid: '${P_UUID}'
		type: '${P_TYPE}'
		label: '${P_LABEL}'
		start: '${P_START}'
		end: '${P_END}'
		size: '${P_BLOCKS} blocks'
__EOF__
}


function mycli_command_entry {
	local DEVICE_IMAGE_PATH=$1
	local DEVICE_IMAGE_FILE=$(basename "${DEVICE_IMAGE_PATH}")
	local ARCHIVE_DIR=$2
	local CURRENT=$(pwd)
	[ ! -f "${DEVICE_IMAGE_PATH}" ] && ERR "missing ${DEVICE_IMAGE_PATH}" && exit 1
	[ "" == "${ARCHIVE_DIR}" ] && ERR "please specify archive directory" && exit 2
	[ ! -d "${ARCHIVE_DIR}" ] && mkdir -p ${ARCHIVE_DIR}

	local MOUNT_TOP_DIR="/mnt/${CLI_PROJECT_NAME}/$(date '+%Y%m%d%H%M%S')"

	# Directory structure:
	#
	#     /ARCHIVE_DIR_ROOT
	#          /config.json
	#          /.verbose
	#              /p1.filelist.txt
	#              /p2.filelist.txt
	#              /p3.filelist.txt
	#          /partitions
	#              /p1
	#              /p2
	#              /p3
	#              ...
	#
	local ARCHIVE_PARTITION_DIR="${ARCHIVE_DIR}/partitions"
	local ARCHIVE_VERBOSE_DIR="${ARCHIVE_DIR}/.verbose"
	local ARCHIVE_OPT_DIR="${ARCHIVE_DIR}/opts"
	local ARCHIVE_CONFIG_LS="${ARCHIVE_DIR}/config.ls"
	local ARCHIVE_CONFIG_JSON="${ARCHIVE_DIR}/config.json"
	rm -f ${ARCHIVE_CONFIG_LS}
	rm -rf ${ARCHIVE_PARTITION_DIR}
	mkdir -p ${ARCHIVE_PARTITION_DIR}
	mkdir -p ${ARCHIVE_VERBOSE_DIR}
	mkdir -p ${ARCHIVE_OPT_DIR}
	echo "source: '${DEVICE_IMAGE_PATH}'" >> ${ARCHIVE_CONFIG_LS}

	cleanup_mounting_points ${DEVICE_IMAGE_PATH}
	kpartx -a -s -v ${DEVICE_IMAGE_PATH} || {
		ERR "failed to mount image file ${DEVICE_IMAGE_PATH}"
		exit 10
	}

	local LOOPBACK_DEVICE=$(losetup -a | grep "${DEVICE_IMAGE_FILE}" | awk -F':' '{print $1}')
	local LOOPBACK_DEVICE_NAME=$(basename ${LOOPBACK_DEVICE})
	local PARTITIONS=($(find /dev/mapper -name "${LOOPBACK_DEVICE_NAME}p*" | sort))
	local PARITION_TABLE_INFO=$(mktemp /tmp/XXXXXX)
	INFO "PARITION_TABLE_INFO = ${PARITION_TABLE_INFO}"

	echo "opts: " >> ${ARCHIVE_CONFIG_LS}
	if [ "true" == "${DUMP_AM335X_UBOOT_FROM_MBR}" ]; then
		local DIR="${ARCHIVE_OPT_DIR}/DUMP_AM335X_UBOOT_FROM_MBR"
		mkdir -p ${DIR}
		RUN_CMD dd if=${LOOPBACK_DEVICE} of=${DIR}/MLO count=1 seek=1 conv=notrunc bs=128k
		RUN_CMD dd if=${LOOPBACK_DEVICE} of=${DIR}/u-boot.img count=2 seek=1 conv=notrunc bs=384k
		echo -e "\tDUMP_AM335X_UBOOT_FROM_MBR: true" >> ${ARCHIVE_CONFIG_LS}
	else
		echo -e "\tDUMP_AM335X_UBOOT_FROM_MBR: true" >> ${ARCHIVE_CONFIG_LS}
	fi

	fdisk -l ${LOOPBACK_DEVICE} > ${PARITION_TABLE_INFO}
	cat ${PARITION_TABLE_INFO}
	echo "partitions:" >> ${ARCHIVE_CONFIG_LS}
	for p in "${PARTITIONS[@]}"; do
		local PARTITION=$(basename $p)
		local PARTITION_NUMBER=$(echo ${PARTITION} | sed "s/^${LOOPBACK_DEVICE_NAME}//g")

		local TMP=$(mktemp /tmp/XXXXXX)
		blkid $p | tr ' ' '\n' | grep -v "^$" > ${TMP}
		[ "0" != "$?" ] && ERR "failed to get partition state for $p" && exit 11
		local UUID=$(cat ${TMP} | grep "^UUID" | awk -F'=' '{print $2}' | sed 's/"//g')
		local TYPE=$(cat ${TMP} | grep "^TYPE" | awk -F'=' '{print $2}' | sed 's/"//g')
		local LABEL=$(cat ${TMP} | grep "^LABEL" | awk -F'=' '{print $2}' | sed 's/"//g')
		INFO "$p::TMP => ${TMP}"
		rm -f ${TMP}

		local P_START=$(cat ${PARITION_TABLE_INFO} | grep ${PARTITION} | awk '{print $2}')
		local P_END=$(cat ${PARITION_TABLE_INFO} | grep ${PARTITION} | awk '{print $3}')
		local BLOCKS=$(cat ${PARITION_TABLE_INFO} | grep ${PARTITION} | awk '{print $4}')
		[ "*" == "${P_START}" ] && P_START=${P_END} && P_END=${BLOCKS} && BLOCKS=$(cat ${PARITION_TABLE_INFO} | grep ${PARTITION} | awk '{print $5}')

		local PARTITION_SRC_DIR="${MOUNT_TOP_DIR}/${PARTITION_NUMBER}"
		local PARTITION_DST_DIR="${ARCHIVE_PARTITION_DIR}/${PARTITION_NUMBER}"
		RUN_CMD mkdir -p ${PARTITION_SRC_DIR}
		RUN_CMD mkdir -p ${PARTITION_DST_DIR}
		RUN_CMD mount -t ${TYPE} ${p} ${PARTITION_SRC_DIR}
		[ "0" != "$?" ] && ERR "failed to mount ${p} to ${PARTITION_SRC_DIR}" && break

		cd ${PARTITION_SRC_DIR}
		find . > "${ARCHIVE_VERBOSE_DIR}/${PARTITION_NUMBER}.filelist.txt"
		local SIZE=$(du -sk . | awk '{print $1}') 
		SIZE=$((SIZE * 1024))
		INFO "${p} => $(printf "%'d" ${SIZE}) bytes"
		tar cf - . | pv -s ${SIZE} | tar xf - -C ${PARTITION_DST_DIR}
		du -s -m ./* > ${ARCHIVE_VERBOSE_DIR}/${PARTITION_NUMBER}.sizes
		cd ${CURRENT}
		RUN_CMD sync
		RUN_CMD sleep 1
		RUN_CMD sync
		RUN_CMD umount ${p}
		RUN_CMD rm -rf ${PARTITION_SRC_DIR}

		PARTITION_NUMBER=${PARTITION_NUMBER} \
			P_UUID=${UUID} \
			P_TYPE=${TYPE} \
			P_LABEL=${LABEL} \
			P_START=${P_START} \
			P_END=${P_END} \
			P_BLOCKS=${BLOCKS} \
			output_partition_info ${ARCHIVE_CONFIG_LS}
	done
	RUN_CMD rm -f ${PARITION_TABLE_INFO}
	RUN_CMD rm -rf ${MOUNT_TOP_DIR}

	RUN_CMD kpartx -d -s -v ${DEVICE_IMAGE_PATH}
	RUN_CMD sleep 1
	dmsetup info | grep "^Name:" | awk '{print $2}' | xargs -I{} sh -c "dmsetup remove {}"
	[ "" != "$(losetup -a | grep ${LOOPBACK_DEVICE})" ] && RUN_CMD losetup -d ${LOOPBACK_DEVICE}

	cat ${ARCHIVE_CONFIG_LS} | lsc -cjp > ${ARCHIVE_CONFIG_JSON}
	cat ${ARCHIVE_CONFIG_JSON} | jq .
}
